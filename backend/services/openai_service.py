from openai import OpenAI
import os
from dotenv import load_dotenv
import logging
import tiktoken

load_dotenv()
client = OpenAI()

logging.basicConfig(level=logging.ERROR)
logger = logging.getLogger(__name__)

MAX_TOKENS_PER_CHUNK = 3000  # GPT-4o iÃ§in Ã¶nerilen gÃ¼venli limit

# ------------------------------ Token hesaplama ------------------------------
def count_tokens(text: str, model: str = "gpt-4o") -> int:
    enc = tiktoken.encoding_for_model(model)
    return len(enc.encode(text))

# ------------------------------ Metni chunk'lara bÃ¶l ------------------------------
def chunk_text(text: str, max_tokens: int = MAX_TOKENS_PER_CHUNK) -> list:
    words = text.split()
    chunks, current_chunk = [], []

    for word in words:
        current_chunk.append(word)
        if count_tokens(" ".join(current_chunk)) > max_tokens:
            current_chunk.pop()
            chunks.append(" ".join(current_chunk))
            current_chunk = [word]

    if current_chunk:
        chunks.append(" ".join(current_chunk))
    
    return chunks

# ------------------------------ Kategorize edilmiÅŸ Ã§Ä±ktÄ±yÄ± parse et ------------------------------
def parse_categorized_summary(text):
    categories = {"main_idea": "", "key_points": "", "conclusion": ""}
    current_category = None

    for line in text.split('\n'):
        if line.startswith("###"):
            header = line[3:].strip().lower()
            if "ana fikir" in header:
                current_category = "main_idea"
            elif "Ã¶nemli noktalar" in header:
                current_category = "key_points"
            elif "sonuÃ§" in header:
                current_category = "conclusion"
        elif current_category:
            categories[current_category] += line.strip() + "\n"

    return {k: v.strip() for k, v in categories.items()}

# ------------------------------ GeliÅŸmiÅŸ tag Ã§Ä±karÄ±mÄ± ------------------------------
async def extract_tags_via_openai(text: str, max_tags: int = 5):
    prompt = (
        f"Verilen metinden en fazla {max_tags} adet kÄ±sa ve anlamlÄ± etiket Ã§Ä±kar. "
        "Etiketleri sadece virgÃ¼lle ayÄ±rarak yaz.\n\n"
        f"Metin:\n{text}"
    )

    try:
        completion = client.chat.completions.create(
            model="gpt-4o",
            messages=[
                {"role": "system", "content": "Sen profesyonel bir metin analiz uzmanÄ±sÄ±n ve verilen metinlerden en alakalÄ± etiketleri Ã§Ä±karÄ±yorsun. Etiketleri TÃ¼rkÃ§e olarak Ã¼ret."},
                {"role": "user", "content": prompt}
            ],
            temperature=0.2,
        )

        tags_response = completion.choices[0].message.content.strip()
        tags = [tag.strip() for tag in tags_response.split(",") if tag.strip()]
        
        return tags[:max_tags]

    except Exception as e:
        logger.error(f"OpenAI API hatasÄ± (Tag Ã§Ä±karma): {str(e)}")
        return []


# ------------------------------ Ana Ã¶zetleme fonksiyonu ------------------------------
async def summarize_text(text: str, format_type: str = "paragraph", length: str = "medium"):
    try:
        length_instructions = {
            "short": "Ã‡ok kÄ±sa, Ã¶zlÃ¼ ve tek cÃ¼mlelik bir Ã¶zet oluÅŸtur.",
            "medium": "Orta uzunlukta, Ã¶nemli noktalarÄ± kapsayan bir Ã¶zet oluÅŸtur.",
            "long": "Uzun ve detaylÄ±, kapsamlÄ± bir Ã¶zet Ã¼ret."
        }

        length_prompt = length_instructions.get(length, "Orta uzunlukta, Ã¶nemli noktalarÄ± kapsayan bir Ã¶zet oluÅŸtur.")
        format_prompts = {
            "categorized": (
                "AÅŸaÄŸÄ±daki metni kategorilere ayrÄ±lmÄ±ÅŸ ÅŸekilde Ã¶zetle:\n"
                "- Ana Fikir\n"
                "- Ã–nemli Noktalar\n"
                "- SonuÃ§\n"
                "Her baÅŸlÄ±ÄŸÄ± '### ' ile belirt. Madde madde yaz.\n"
                f"{length_prompt}"
            ),
            "paragraph": f"AÅŸaÄŸÄ±daki metni bir paragraf halinde Ã¶zetle:\n{length_prompt}",
            "bullet": f"AÅŸaÄŸÄ±daki metni kÄ±sa madde iÅŸaretleriyle Ã¶zetle:\n{length_prompt}",
            "short": "AÅŸaÄŸÄ±daki metni tek bir cÃ¼mlede Ã¶zetle."
        }

        prompt_template = format_prompts.get(format_type, f"AÅŸaÄŸÄ±daki metni Ã¶zetle:\n{length_prompt}")
        chunks = chunk_text(text)

        summaries = []
        for chunk in chunks:
            completion = client.chat.completions.create(
                model="gpt-4o",
                messages=[
                    {"role": "system", "content": "You are a professional summarizer that does not translate text."},
                    {"role": "user", "content": f"{prompt_template}\n\n{chunk}"}
                ]
            )
            summaries.append(completion.choices[0].message.content.strip())

        full_summary = "\n\n".join(summaries)
        
        # ğŸ”¥ Profesyonel etiket Ã§Ä±karÄ±mÄ±nÄ± burada Ã§aÄŸÄ±rÄ±yoruz
        tags = await extract_tags_via_openai(text)

        if format_type == "categorized":
            categorized_result = parse_categorized_summary(full_summary)
            categorized_result["tags"] = tags
            return categorized_result
        else:
            return {
                "summary": full_summary,
                "tags": tags,
                "category": format_type,
            }

    except Exception as e:
        logger.error(f"OpenAI API hatasÄ±: {str(e)}")
        return {"error": "Ã–zetleme sÄ±rasÄ±nda bir hata oluÅŸtu."}
